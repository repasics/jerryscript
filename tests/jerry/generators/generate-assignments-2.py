#!/usr/bin/env python


# Copyright JS Foundation and other contributors, http://js.foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
import os

def generate(DEST, SEED, COUNTER):

    file_to_open = os.path.join(DEST, "assignments-2.js")

    with open(file_to_open, "w") as file:

        file.write("//This file is generated by generate-assignments-2.py\n")

        COUNTER = 400
        MAX = 9007199254740991
        MIN = -9007199254740991
        MAXMULTIPLIER = 9999
        MINMULTIPLIER = -9999
        MAXNUM = (MAX / MAXMULTIPLIER) / 2
        MINNUM = (MIN / MAXMULTIPLIER + 1) / 2


        random.seed(SEED)

        for i in range(COUNTER):

            N1 = random.randint(MINNUM, MAXNUM)
            N2 = random.randint(MINNUM, MAXNUM)
            N3 = N1 + N2

            file.write("var b = " + str(N1) + ";\n")

            file.write("assert ((b += (%s)) == (%s));\n" % (str(N2), str(N3)))
            file.write("assert (b != (%s));\n" % (str(int(N3 - 1))))
            file.write("assert (b != (%s));\n" % (str(int(N3 + 1))))
            file.write("assert (!(b > (%s) || b < (%s)));\n" % (str(int(N3 + 1)), str(int(N3 - 1))))

            file.write("assert ((b -= (%s)) == (%s));\n" % (str(N2), str(N1)))
            file.write("assert (b != (%s));\n" % (str(int(N1 - 1))))
            file.write("assert (b != (%s));\n" % (str(int(N1 + 1))))
            file.write("assert (!(b > (%s) || b < (%s)));\n" % (str(int(N1 + 1)), str(int(N1 - 1))))

            multiplier = random.randint(MINMULTIPLIER, MAXMULTIPLIER)
            N3 = N1 * multiplier

            file.write("assert ((b *= (%s)) == (%s));\n" % (str(multiplier), str(N3)))
            file.write("assert (b != (%s));\n" % (str(int(N3 - 1))))
            file.write("assert (b != (%s));\n" % (str(int(N3 + 1))))
            file.write("assert (!(b > (%s) || b < (%s)));\n" % (str(int(N3 + 1)), str(int(N3 - 1))))

            if random.randint(0, 1):
                    divisor = random.randint(1, MAX)
            else:
                    divisor = random.randint(MIN, -1)

            N3 = float(N3) / divisor

            file.write("b /= (%s);\n" % (str(divisor)))
            file.write("assert (b != (%s));\n" % (str(int(N3 - 1))))
            file.write("assert (b != (%s));\n" % (str(int(N3 + 1))))
            file.write("assert (!(b > (%s) || b < (%s)));\n" % (str(float(N3 + 1)), str(float(N3 - 1))))

            N1 = random.randint(MIN, MAX)

            if (((N1 < 0 and divisor > 0) or (N1 > 0 and divisor < 0)) and (N1 % divisor != 0) ):
                N3 = ((N1 % divisor) - divisor)
            else:
                N3 = (N1 % divisor)

            file.write("b = (%s);\n" % (str(N1)))
            file.write("assert ((b %%= (%s)) == (%s));\n" % (str(divisor), str(N3)))
            file.write("assert (b != (%s));\n" % (str(int(N3 - 1))))
            file.write("assert (b != (%s));\n" % (str(int(N3 + 1))))
            file.write("assert (!(b > (%s) || b < (%s)));\n" % (str(int(N3 + 1)), str(int(N3 - 1))))
