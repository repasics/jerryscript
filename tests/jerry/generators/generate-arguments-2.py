#!/usr/bin/env python


# Copyright JS Foundation and other contributors, http://js.foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
import os

def generate(DEST, SEED, COUNTER):

    file_to_open = os.path.join(DEST, "arguments-2.js")

    with open(file_to_open, "w") as file:

        file.write("//This file is generated by generate-arguments-2.py\n")

        COUNTER = 300
        MAX = 9007199254740991
        MIN = -9007199254740991

        random.seed(SEED)

        file.write("function f_arg (arguments)\n{\n    return arguments;\n};\n")
        file.write("function f (a, b, c)\n{\n    return arguments;\n};\n")

        for i in range(COUNTER):

            N1 = random.randint(MIN, MAX)
            N2 = random.randint(MIN, MAX)
            N3 = random.randint(MIN, MAX)

            file.write("assert (f_arg (%s) === (%s));\n" % (str(N1), str(N1)))
            file.write("assert (f_arg (%s) !== (%s));\n" % (str(N1), str(int (N1 - 1))))
            file.write("assert (f_arg (%s) !== (%s));\n" % (str(N1), str(int (N1 + 1))))

        for i in range(COUNTER):

            N1 = random.randint(MIN, MAX)
            N2 = random.randint(MIN, MAX)
            N3 = random.randint(MIN, MAX)
            N4 = random.randint(MIN, MAX)
            N5 = random.randint(MIN, MAX)
            if random.randint(0, 1):
                N6 = random.randint(5, MAX)
            else:
                N6 = random.randint(MIN, -1)

            file.write("args = f (%s, %s, %s, %s, %s);\n" % (str(N1), str(N2), str(N3), str(N4), str(N5)))
            file.write("assert (args[0] === %s);\n" % (str(N1)))
            file.write("assert (args[1] === %s);\n" % (str(N2)))
            file.write("assert (args[2] === %s);\n" % (str(N3)))
            file.write("assert (args[3] === %s);\n" % (str(N4)))
            file.write("assert (args[4] === %s);\n" % (str(N5)))
            file.write("assert (args[%s] === undefined);\n" % str(N6))

            file.write("assert (args[0] !== %s);\n" % (str(int(N1 + 1))))
            file.write("assert (args[1] !== %s);\n" % (str(int(N2 + 1))))
            file.write("assert (args[2] !== %s);\n" % (str(int(N3 + 1))))
            file.write("assert (args[3] !== %s);\n" % (str(int(N4 + 1))))
            file.write("assert (args[4] !== %s);\n" % (str(int(N5 + 1))))

            file.write("assert (args[0] !== %s);\n" % (str(int(N1 - 1))))
            file.write("assert (args[1] !== %s);\n" % (str(int(N2 - 1))))
            file.write("assert (args[2] !== %s);\n" % (str(int(N3 - 1))))
            file.write("assert (args[3] !== %s);\n" % (str(int(N4 - 1))))
            file.write("assert (args[4] !== %s);\n" % (str(int(N5 - 1))))
